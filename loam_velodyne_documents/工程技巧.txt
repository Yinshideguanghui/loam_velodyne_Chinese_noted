1.
多数浮点数用的是float而非double等。
根据https://blog.csdn.net/u013834525/article/details/103847759，
float精度够用时，占用内存更小，eigen运算更快，（硬盘读取更快）

可改进？math_utils.h的float方法中有的固定数值是用double写的，可改为float？
还是说作者故意double运算最后再截成float？

2.
用auto精简代码并方便修改，如：auto const& 函数名(){return 成员变量;}

3.
其他地方用不到的工具成员函数可用private封装，使调用时自动补全更方便找到所需函数

4.
浮点运算中，需要反复除以同一个数时，先算出倒数，用“乘倒数”替代“除以”，提高运算速度

5.
注意若message种类不同，则publish/subscribe时队列最大容纳message数的设置可能不同。其中一个可能的影响因素是message的规模：如点云本身较大，则队列容量较小；IMU的队列容量设置可比点云大很多

6.
考虑到计算资源消耗，BasicLaserOdometry::process中每5次迭代搜索一次角点的最邻近点和平方距离最小点，而不是每次迭代都搜索。

7.
浮点数和整数比较当判断条件时，如整数<=浮点数，可把浮点数设的大一些(如+0.5)，以防.9999等情况不通过

8.
验证各种复杂的矩阵表达式，如连续旋转矩阵，可以用matlab的syms

9.
写四舍五入时，注意计算机是否是“向零取整”，如果是，则负数在执行和正数相同的四舍五入计算后，还要再-1

10.
善用 for(auto & x : x来源) 对x遍历，简化for代码





